--- lab0.c	2023-11-18 23:38:25.580373027 +0300
+++ lab1.c	2023-11-18 23:34:01.335083000 +0300
@@ -1,66 +1,64 @@
 #include <assert.h>
+#include <limits.h>
 #include <stddef.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
-char *create_lab_template() {
-  enum { SIDE_LEN = 13 };
-  char *lab = calloc(SIDE_LEN * SIDE_LEN, sizeof(*lab));
-  for (size_t i = 0; i < SIDE_LEN; ++i) {
-    for (size_t j = 0; j < SIDE_LEN; ++j) {
+char *create_lab_template(size_t lab_size) {
+  size_t side_len = lab_size * 2 + 1;
+  char *lab = calloc(side_len * side_len, sizeof(*lab));
+  for (size_t i = 0; i < side_len; ++i) {
+    for (size_t j = 0; j < side_len; ++j) {
       if (i % 2 == 0 || j % 2 == 0) {
-        lab[i * SIDE_LEN + j] = '#';
+        lab[i * side_len + j] = '#';
       } else {
-        lab[i * SIDE_LEN + j] = '.';
+        lab[i * side_len + j] = '.';
       }
     }
   }
   return lab;
 }
 
-size_t get_neighbour(size_t cell, size_t n) {
+size_t get_neighbour(size_t cell, size_t n, size_t lab_size) {
   assert(n < 4 && "Expecting n to be less than 4");
-  enum { LAB_SIZE = 6 };
   switch (n) {
   case 0:
-    cell -= cell > LAB_SIZE ? LAB_SIZE : 0;
+    cell -= cell > lab_size ? lab_size : 0;
     break;
   case 1:
-    cell += cell % LAB_SIZE + 1 != LAB_SIZE ? 1 : 0;
+    cell += cell % lab_size + 1 != lab_size ? 1 : 0;
     break;
   case 2:
-    cell += cell < LAB_SIZE * (LAB_SIZE - 1) ? LAB_SIZE : 0;
+    cell += cell < lab_size * (lab_size - 1) ? lab_size : 0;
     break;
   case 3:
-    cell -= cell % LAB_SIZE != 0 ? 1 : 0;
+    cell -= cell % lab_size != 0 ? 1 : 0;
     break;
   }
   return cell;
 }
 
-void print_lab(char *lab) {
-  enum { SIDE_LEN = 13 };
-  for (size_t i = 0; i < SIDE_LEN; ++i) {
-    printf("%.*s\n", SIDE_LEN, lab + i * SIDE_LEN);
+void print_lab(char *lab, size_t lab_size) {
+  size_t side_len = 2 * lab_size + 1;
+  for (size_t i = 0; i < side_len; ++i) {
+    printf("%.*s\n", (int)side_len, lab + i * side_len);
   }
 }
 
-char *mutate_lab(char *lab_template) {
-  enum { LAB_SIZE = 6 };
+char *mutate_lab(char *lab_template, size_t lab_size) {
   size_t visited_size = 0;
-  unsigned char visited[LAB_SIZE * LAB_SIZE];
-  memset(visited, 0, sizeof(visited));
+  unsigned char *visited = calloc(lab_size * lab_size, sizeof(*visited));
   size_t work_list_size = 0;
-  size_t work_list[LAB_SIZE * LAB_SIZE];
-  size_t current_cell = rand() % (LAB_SIZE * LAB_SIZE);
+  size_t *work_list = calloc(lab_size * lab_size, sizeof(*work_list));
+  size_t current_cell = rand() % (lab_size * lab_size);
   visited[current_cell] = 1;
   ++visited_size;
-  while (visited_size != LAB_SIZE * LAB_SIZE) {
+  while (visited_size != lab_size * lab_size) {
     size_t neighbour_num = rand() % 4;
     size_t neighbour_cell;
     for (int i = 0; i < 4; ++i) {
-      neighbour_cell = get_neighbour(current_cell, neighbour_num);
+      neighbour_cell = get_neighbour(current_cell, neighbour_num, lab_size);
       if (!visited[neighbour_cell])
         break;
       neighbour_num = (neighbour_num + 1) % 4;
@@ -69,26 +67,26 @@
       work_list[work_list_size++] = current_cell;
       int lab_wall_idx_diff;
       switch (neighbour_num) {
-        case 0: lab_wall_idx_diff = -(2 * LAB_SIZE + 1); break;
+        case 0: lab_wall_idx_diff = -(2 * lab_size + 1); break;
         case 1: lab_wall_idx_diff = 1; break;
-        case 2: lab_wall_idx_diff = 2 * LAB_SIZE + 1; break;
+        case 2: lab_wall_idx_diff = 2 * lab_size + 1; break;
         case 3: lab_wall_idx_diff = -1; break;
       }
-      size_t lab_row = current_cell / LAB_SIZE * 2 + 1;
-      size_t lab_column = current_cell % LAB_SIZE * 2 + 1;
-      lab_template[(2 * LAB_SIZE + 1) * lab_row + lab_column + lab_wall_idx_diff] = '.';
+      size_t lab_row = current_cell / lab_size * 2 + 1;
+      size_t lab_column = current_cell % lab_size * 2 + 1;
+      lab_template[(2 * lab_size + 1) * lab_row + lab_column + lab_wall_idx_diff] = '.';
       current_cell = neighbour_cell;
       visited[neighbour_cell] = 1;
       ++visited_size;
     } else if (work_list_size != 0)
       current_cell = work_list[--work_list_size];
     else {
-      size_t search_start = rand() % (LAB_SIZE * LAB_SIZE);
+      size_t search_start = rand() % (lab_size * lab_size);
       current_cell = search_start;
       do {
         if (!visited[current_cell])
           break;
-        current_cell = (current_cell + 1) % (LAB_SIZE * LAB_SIZE);
+        current_cell = (current_cell + 1) % (lab_size * lab_size);
       } while (current_cell != search_start);
       assert(current_cell != search_start &&
              "There is no way we search for not visited!");
@@ -96,14 +94,31 @@
       ++visited_size;
     }
   }
+  free(visited);
+  free(work_list);
   return lab_template;
 }
 
-int main() {
-  enum { SIDE_LEN = 13 };
-  char *lab = create_lab_template();
-  lab = mutate_lab(lab);
-  print_lab(lab);
+void print_usage(const char *prog_name) {
+    fputs("Usage: ", stderr);
+    fprintf(stderr, "%s ", prog_name);
+    fputs("size\n", stderr);
+    fputs("\tsize has to be greater than 1 and less than UINT_MAX\n", stderr);
+}
+
+int main(int argc, char *argv[]) {
+  if (argc != 2) {
+    print_usage(argv[0]);
+    return 1;
+  }
+  size_t lab_size = atol(argv[1]);
+  if (lab_size == 0 || lab_size >= UINT_MAX) {
+    print_usage(argv[0]);
+    return 2;
+  }
+  char *lab = create_lab_template(lab_size);
+  lab = mutate_lab(lab, lab_size);
+  print_lab(lab, lab_size);
   free(lab);
   return 0;
 }
